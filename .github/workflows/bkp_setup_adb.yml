name: BKP Setup Azure adb

# Este arquivo de workflow do GitHub Actions é utilizado para configurar e implantar
# recursos no Azure Databricks (ADB) e no Unity Catalog. Ele é composto por dois jobs principais:
# 1. build: Faz o checkout de um repositório privado e faz o upload de artefatos necessários.
# 2. setup-unity-catalog: Configura o Unity Catalog utilizando Terraform.
# 3. setup-adb-compute: Configura os recursos de computação do Azure Databricks utilizando Terraform.
#
# O workflow é acionado manualmente através da aba Actions no GitHub.
# Ele utiliza runners do Ubuntu para executar os jobs e faz uso de variáveis de ambiente
# e segredos armazenados no GitHub para autenticação e configuração.

# Controla quando o workflow será executado
on:
  # Permite executar este workflow manualmente a partir da aba Actions
  workflow_dispatch:

# Uma execução de workflow é composta por um ou mais jobs que podem ser executados sequencialmente ou em paralelo
jobs:
  # Este workflow contém um único job chamado "build"
  build:
    name: Strife Build
    # O tipo de runner que o job será executado
    runs-on: ubuntu-latest

    # Steps representam uma sequência de tarefas que serão executadas como parte do job
    steps:
      # Faz o checkout de outro repositório privado
      - name: Check out my other private repo
        uses: actions/checkout@v4
        with:
          repository: lealdouglas/strife

      # Faz o upload do artefato Unity
      - name: Upload Artifact unity
        uses: actions/upload-artifact@v1
        with:
          name: lakehouseuc
          path: ${{ github.workspace }}//azsetup/lakehouse-adbuc

      # Faz o upload do artefato Compute
      - name: Upload Artifact Compute
        uses: actions/upload-artifact@v1
        with:
          name: lakehousecp
          path: ${{ github.workspace }}//azsetup/lakehouse-adbcompute

  # Job para configurar o Unity Catalog
  setup-unity-catalog:
    name: Strife Setup Unity Catalog
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ github.workspace }}//azsetup/lakehouse-adbuc

    env:
      ARM_CLIENT_ID: ${{ secrets.TF_ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.TF_ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.TF_ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.TF_ARM_TENANT_ID }}

    environment:
      name: dev

    needs: build
    steps:
      # Baixa o artefato do Terraform
      - name: Download Terraform
        uses: actions/download-artifact@v2
        with:
          name: lakehouseuc
          path: ${{ github.workspace }}//azsetup/lakehouse-adbuc

      # Configura o Terraform
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      # Inicializa o Terraform
      - name: Terraform Init
        id: init
        run: terraform init

      # Valida a configuração do Terraform
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      # Gera o plano de execução do Terraform
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -var "account_id=${{ secrets.ADB_ACCOUNT_ID}}" -var "azure_client_id=${{ secrets.TF_ARM_CLIENT_ID}}" -var "azure_client_secret=${{ secrets.TF_ARM_CLIENT_SECRET}}" -var "azure_tenant_id=${{ secrets.TF_ARM_TENANT_ID}}" -var "envv=${{vars.ENVV}}"
        continue-on-error: true

      # Aplica o módulo específico do Terraform
      - name: Terraform Apply Target Module
        run: terraform apply -target='module.metastore_and_users' -auto-approve -var "account_id=${{ secrets.ADB_ACCOUNT_ID}}" -var "azure_client_id=${{ secrets.TF_ARM_CLIENT_ID}}" -var "azure_client_secret=${{ secrets.TF_ARM_CLIENT_SECRET}}" -var "azure_tenant_id=${{ secrets.TF_ARM_TENANT_ID}}" -var "envv=${{vars.ENVV}}"

      # Aplica a configuração completa do Terraform
      - name: Terraform Apply
        run: terraform apply -auto-approve -var "account_id=${{ secrets.ADB_ACCOUNT_ID}}" -var "azure_client_id=${{ secrets.TF_ARM_CLIENT_ID}}" -var "azure_client_secret=${{ secrets.TF_ARM_CLIENT_SECRET}}" -var "azure_tenant_id=${{ secrets.TF_ARM_TENANT_ID}}" -var "envv=${{vars.ENVV}}"

  # Job para configurar o ADB Compute
  setup-adb-compute:
    name: Strife Setup ADB Compute
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ github.workspace }}//azsetup/lakehouse-adbcompute

    env:
      ARM_CLIENT_ID: ${{ secrets.TF_ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.TF_ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.TF_ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.TF_ARM_TENANT_ID }}

    environment:
      name: dev

    needs: setup-unity-catalog
    steps:
      # Baixa o artefato do Terraform
      - name: Download Terraform
        uses: actions/download-artifact@v2
        with:
          name: lakehousecp
          path: ${{ github.workspace }}//azsetup/lakehouse-adbcompute

      # Configura o Terraform
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      # Inicializa o Terraform
      - name: Terraform Init
        id: init
        run: terraform init

      # Valida a configuração do Terraform
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      # Gera o plano de execução do Terraform
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -var "account_id=${{ secrets.ADB_ACCOUNT_ID}}" -var "azure_client_id=${{ secrets.TF_ARM_CLIENT_ID}}" -var "azure_client_secret=${{ secrets.TF_ARM_CLIENT_SECRET}}" -var "azure_tenant_id=${{ secrets.TF_ARM_TENANT_ID}}" -var "envv=${{vars.ENVV}}"
        continue-on-error: true

      # Aplica a configuração completa do Terraform
      - name: Terraform Apply
        run: terraform apply -auto-approve -var "account_id=${{ secrets.ADB_ACCOUNT_ID}}" -var "azure_client_id=${{ secrets.TF_ARM_CLIENT_ID}}" -var "azure_client_secret=${{ secrets.TF_ARM_CLIENT_SECRET}}" -var "azure_tenant_id=${{ secrets.TF_ARM_TENANT_ID}}" -var "envv=${{vars.ENVV}}"
